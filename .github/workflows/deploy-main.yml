name: Build and Deploy PRODUCTION

concurrency: main

on:
  push:
    branches:
      - main
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v2
      - uses: fregante/setup-git-user@v1
      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      # TODO: remove below step once moved to once node stable version supports npm 7,  https://github.com/actions/setup-node/issues/213
      - name: npm 7
        run: npm i -g npm@7

      - name: Set npm config to publish private repo
        run: |
          npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create .env file's
        env:
          PROD_ENV_FILE: ${{ secrets.PROD_ENV_FILE }}
        run: |
          touch .env
          echo $PROD_ENV_FILE | openssl base64 -A -d > .env.prod

      - name: Install dependencies
        run: |
          npm ci

      - name: Run the tests and generate coverage report
        run: npm run coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # required for private repos

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_BUCKET_REGION }}

      - name: Build and Publish and Deploy
        run: |
          npm run deploy:production
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: build

    runs-on: ubuntu-latest
    permissions: write-all
    # always run slack notify on success and failure results... ignoring cancelled, or skipped result
    if: ${{ always() && (contains(needs.*.result, 'success') || (contains(needs.*.result, 'failure'))) }}
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: deployment-updates
          SLACK_COLOR: ${{ needs.build.result }} # or a specific color like 'good' or '#ff00ff'
          SLACK_TITLE: 'Environment: PROD, Application: Guest Communication'
          SLACK_USERNAME: 'PROD'
          SLACK_ICON_EMOJI: ':speech_balloon'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_FOOTER: 'javascript-dudes'
          MSG_MINIMAL: 'commit,actions url'
